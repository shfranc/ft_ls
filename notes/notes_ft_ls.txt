FT_LS
=====
1er projet de l'arc Unix
API : Application programming Interface, set of routines, protocols, tools for building software applications, how software components should interact.
Se pencher sur un design initial.
Optimiser la libft.
Rendre avec un Makefile qui compile la lib avec son Makefile, puis compile le projet (et le recompile que si necessaire).

File System :
-------------
How data is used and storage.
Architecture = 3 layers
* logical file system
	API for file operations : OPEN, CLOSE, READ.
* virtual file system
	Multiple concurrente instances of physical file systens, each one being a file system implementation.
* physical file system
	physical operation of the storage device, physical blocks being read and written.
	handl buffering and memory management, and physical placement of blocks in specific locations on the storage medium.
	interact with the device drivers or the channel (input/output) to drive the storage device.
Filename from the Unicode character set.

Fonctions autorisees :
----------------------
	write		<unistd.h>		void	write(int fd, const void *buf, size_t nbyte)
				write output

	opendir		<dirent.h>		DIR		*opendir(const char *filename)
				open directory
				NULL returned if filename can't be accessed ? malloc failed to find enough memory (errno is set)
				type DIR : /* structure describing an open directory. */
				typedef struct	_dirdesc
				{
					int     __dd_fd;      /* file descriptor associated with directory */
				    long    __dd_loc;     /* offset in current buffer */
				    long    __dd_size;    /* amount of data returned by getdirentries */
				    char    *__dd_buf;    /* data buffer */
				    int     __dd_len;     /* size of data buffer */
				    long    __dd_seek;    /* magic cookie returned by getdirentries */
				    long    __dd_rewind;  /* magic cookie for rewinding */
				    int     __dd_flags;   /* flags for readdir */
				    pthread_mutex_t __dd_lock; /* for thread locking */
				    struct _telldir *__dd_td; /* telldir position recording */
				} 				DIR;

	readdir		<dirent.h>		struct dirent *readdir(DIR *dirrp)	
				ptr to the next directory entry
				NULL if end or error
				if error, errno is set to any value documented in getdirentries (2)
				struct dirent /* when _DARWIN_FEATURE_64_BIT_INODE is defined */
				{
					ino_t      d_fileno;     /* file number of entry */
					__uint64_t d_seekoff;    /* seek offset (optional, used by servers) */
					__uint16_t d_reclen;     /* length of this record */
					__uint16_t d_namlen;     /* length of string in d_name */
					__uint8_t  d_type;       /* file type, see below */
					char    d_name[1024];    /* name must be no longer than this */
				}

	
	closedir	<dirent.h>		int		closedir(DIR *dirp)
				close the directory stream and free the structure associated with dirp pointer
				return 0 on success, -1 if error (and errno is set)

	stat		<sys/stat.h>	int		stat(const char *restrict path, struct stat *restrict buf)
				get file status
				struct stat /* when _DARWIN_FEATURE_64_BIT_INODE is defined */
				{
					dev_t           st_dev;           /* ID of device containing file */
					mode_t          st_mode;          /* Mode of file (see below) */
					nlink_t         st_nlink;         /* Number of hard links */
					ino_t           st_ino;           /* File serial number */
					uid_t           st_uid;           /* User ID of the file */
					gid_t           st_gid;           /* Group ID of the file */
					dev_t           st_rdev;          /* Device ID */
					struct timespec st_atimespec;     /* time of last access */
					struct timespec st_mtimespec;     /* time of last data modification */
					struct timespec st_ctimespec;     /* time of last status change */
					struct timespec st_birthtimespec; /* time of file creation(birth) */
					off_t           st_size;          /* file size, in bytes */
					blkcnt_t        st_blocks;        /* blocks allocated for file */
					blksize_t       st_blksize;       /* optimal blocksize for I/O */
					uint32_t        st_flags;         /* user defined flags for file */
					uint32_t        st_gen;           /* file generation number */
					int32_t         st_lspare;        /* RESERVED: DO NOT USE! */
					int64_t         st_qspare[2];     /* RESERVED: DO NOT USE! */
				};
			
				st_mode is a word with the following bits: 
			    #define S_IFMT 0170000           /* type of file */
				#define        S_IFIFO  0010000  /* named pipe (fifo) */
				#define        S_IFCHR  0020000  /* character special */
				#define        S_IFDIR  0040000  /* directory */
				#define        S_IFBLK  0060000  /* block special */
				#define        S_IFREG  0100000  /* regular */
				#define        S_IFLNK  0120000  /* symbolic link */
				#define        S_IFSOCK 0140000  /* socket */
				#define        S_IFWHT  0160000  /* whiteout */
				#define S_ISUID 0004000  /* set user id on execution */ --> special permissions (S/s)
				#define S_ISGID 0002000  /* set group id on execution */ --> ""
				#define S_ISVTX 0001000  /* save swapped text even after use */ --> Sticky bit (T/t)
				#define S_IRUSR 0000400  /* read permission, owner */
				#define S_IWUSR 0000200  /* write permission, owner */
				#define S_IXUSR 0000100  /* execute/search permission, owner */	
				
				S_IRUSR	S_IWUSR	S_IXUSR
				S_IRGRP	S_IWGRP	S_IXGRP
				S_IROTH	S_IWOTH	S_IXOTH

				S_ISBLK(m)
				Test for a block special file.
				S_ISCHR(m)
				Test for a character special file.
				S_ISDIR(m)
				Test for a directory.
				S_ISFIFO(m)
				Test for a pipe or FIFO special file.
				S_ISREG(m)
				Test for a regular file.
				S_ISLNK(m)
				Test for a symbolic link.
				S_ISSOCK(m)
				Test for a socket.

				ces macros sont des masques unsigned short en octal.
				http://stackoverflow.com/questions/15055634/understanding-and-decoding-the-file-mode-value-from-stat-function-output
				http://perldoc.perl.org/functions/stat.html
				mask = st_mode & S_IFMT
				mask ^ S_IF* == 0 --> type trouve !
				http://pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html

				permission : if (st_mode & PERM) == PERM)

				struct timespec
				{
					long    tv_sec;         /* seconds */
					long    tv_nsec;        /* nanoseconds */
				};
	
	lstat		<sys/stat.h>	int		lstat(const char *restrict path, struct stat *restrict buf)
				get files status, if symbolic link, get info of the link not the file (unlike stat)

	getpwuid	<sys/types.h> <uuid/uuid.h>	struct passwd	*getpwuid(uid_t	uid)
				passeword database operation, obtain information from opendirectoryd(8)
				return the first one encontered, a pointer to a thread-specific data structure or NULL. Un exemple dans le man.
				<pwd.h> the returned structure :
				struct passwd {
					char    *pw_name;       /* user name */
					char    *pw_passwd;     /* encrypted password */
					uid_t   pw_uid;         /* user uid */
					gid_t   pw_gid;         /* user gid */
					time_t  pw_change;      /* password change time */
					char    *pw_class;      /* user access class */
					char    *pw_gecos;      /* Honeywell login info */
					char    *pw_dir;        /* home directory */
					char    *pw_shell;      /* default shell */
					time_t  pw_expire;      /* account expiration */
					int     pw_fields;      /* internal: fields filled in */
					};
				
	getgrgid	<grp.h> <uuid/uuid.h>	struct group *getgrgid(gid_t gid)
				group database operations, obtain information from opendirectoryd(8), each line define by the structure group
				<grp.h> struct group {
					char	*gr_name; 		/* group name */
					char	*gr_passwd;		/* group password */
					gid_t	gr_gid;			/* group id */
					char	**gr_mem;		/* group members */

	listxattr	<sys/xattr.h> ssize_t listxattr(const char *path, char *namebuf, size_t size, int options)
				list extended attribute names, namebuf is a data buffer of size bytes fot the names of the extended attributes associated with path.
				extended attribute names terminate with one \0 and returned in arbitrary order.
				only the names which the process hass access to will be returned.
				return value is size of the list of names.
				options controls how the attributes list is generated:
					XATTR_NOFOLLOW : do not follow symbolic links.
					Normally, listxattr lists attributed of the target of the path if it's a symbolic link.
					With this, it will list the attributes of the link itself.
					XATTR_SHOWCOMPRESSION : will list HFS Compression extended attributes (if any) for the path or fd.
				If namebuf == NULL, the functions returns the size of the list extended attributes names ==> useful to determine the size of a buffer sufficiently large to hold the names of the attributes currently associated with path.
				return values ; on success size of the list, if no accessible content, 0, -1 on failure (+errno set as...)

	getxattr	<sys/xattr.h>	ssize_t getxarttr(const char *path, const char *name, void *value, size_t size)
				get an extended attribute value, they are stored as namae:data pairs assocaited with file system objects.
				get up tp size bytes of data from the extended attribute identified by name associated with path into the pre-allocated buffer pointed by value.
				returns number of bytes of data retrived, -1 if error (+errno is set as...)

	time		<time.h>		time_t time(time_t *tloc)
				returns the value of time in seconds since january 1970, includind leapseconds. if error, -1.
				reason of error described in gettimeofday(2).

	ctime		<time.h>		char *ctime(const time_t *clock, char *buf)
				get the time in seconds, adjust it for the current time zone and return a pointer to the string such as : Thu Nov 24 18:22:48 1986\n\0.
				if error return NULL.
				time_t correspond a un long (?), ctime marche en donnant stat->st_mtimespec.tv_sec qui est un long par ex.

	readlink	<unistd.h>		ssize_t readlink(const char *restrict path, char *restrict buf, size_t bufsize)
				read value of symbolic link, place e contents of the symblic link path in the buffer buf, which has size of buf_size. No NYL character is append.
				returns the number of characters placed in the buf if succeeds, -1 if error (+errno set).

	malloc		<stdlib.h>		void *malloc(size_t size)
				allocate size bytes of memory and returns a pointer to the allocated memory.
				if error, return a NULL pointer and errno is set.

	free		<stdlib.h>		void *free(void *ptr)
				free allocation, no return.

	perror		<stdio.h>		void	perror(const char *s)
				finds the message correspondingto the current value of the global variable errno ans writes it, followed by \n.

	strerror	<stdio.h>		char	*strerror(int errnum)
				returns a pointer to the corresponding message.

	exit		<stdlib.h>		void(int status)
				terminate a process

ERRNO is a global variable. A global variable is visible throughout the program (ex : global environment, global state)

errno		<errno.h>		number of last error
				header file defines the integer variable errno.
				Its value is significant only when the return value of the call indicated an error (i.e., -1 from most system calls; -1 or NULL from most library functions)
				All the error names specified by POSIX.1 must have distinct values, with the exception of EAGAIN and EWOULDBLOCK, which may be the same.

ssize_t et size_t : signed size_t and unsigned size_t.

_DARWIN_FEATURE_64_BIT_INODE :
------------------------------
Dans les man, les structures different suivant si _DARWIN_FEATURE_64_BIT_INODE est defini ou non.
Darwin est un système d'exploitation libre et gratuit construit autour du noyau XNU et développé notamment par Apple. Il est dérivé de NeXTSTEP et de BSD. Sa vocation principale est de servir de base au système d'exploitation OS X.
Apple a amorcé le projet OpenDarwin, puis l'a rendu indépendant, pour promouvoir ses technologies et attirer vers elles les développeurs open-source, très attachés à Linux et BSD.

Maccro :
#define _DARWIN_FEATURE_64_BIT_INODE == 1.
Cette maccro existe sur les OS de 42, voir darwin_32_64.c.

Les differents type de fichiers :
---------------------------------
Windows = fichiers qui contiennent des informations et dossiers aui regroupent des fichiers. Mais Unix a une definition plus large de "fichiers" (ex: les fichiers dans /dev, devices sont associes a des peripheriques, ils apparaissent au branchement d'un peripherique et disparaissent ensuite, ou les fichiers dans /proc, baisser la luminosite, etat de la batterie revient sous Linux a modifier un fichier proc, communication avec le noyau...), et peut ne pas avoir d'existance reelle sur le media de stockage.

-	fichiers reguliers	/* docs, images, archives,... */
d	directory			/* dossier */
l	lien symbolic		/* pointe sur un autre fichier */
s	socket				/* communique qvec le reseau */
b	block device		/* un peripherique de stockage (cle usb,...) /*
c	charactere device	/* un peripherique que ne stocke pas de data (webcam, souris,...) */
p	FIFO				/* pipes */
				
Sockets vs pipe : 
	* pipes exists within a specific host. pipes refer to beffering between virtual files, connecting output / input of processes within that host. comminucation uni directionelle.
	* sockets packetize communication using IPv4 or IPv6 and can be extend beyond local host. Communication bi directionnelle.

Liens physiques et liens symbolique :
http://www.commentcamarche.net/contents/1143-unix-les-fichiers
	* liens symbolique = un pointeur virtuels (raccourci) vers un fichier reel.
	* lien physique = un nom alternatif pourun fichier (hardlink).

File attributes :
-----------------
Metadata associated with a file, different from other metadata such as dates, times, filename extensions, file system permissions. In addition to file, folders, volumes.
4 attributes :
	archive
	hidden
	system
	read-only

Extended file attributes :
Associate file with metadata not interpreted by the file system. MacOS supporte les attribut etendus avec le HFS filesystem attributes
HFS Plus/+ : developpe par Apple, appose au filesystem primaire.

Inode :
-------
noeud d'index (index + node en anglais)
The inode is a data structure in a Unix-style file system which describes a filesystem object such as a file or a directory.
À chaque fichier correspond un numéro d'inode (i-number) dans le système de fichiers dans lequel il réside, unique au périphérique sur lequel il est situé.
Les inodes contiennent notamment les métadonnées des fichiers, et en particulier celles concernant les droits d'accès.
Les inodes sont créés lors de la création du système de fichiers. La quantité d'inodes (généralement déterminée lors du formatage et dépendant de la taille de la partition) indique le nombre maximum de fichiers que le système de fichiers peut contenir.

PARTIE OBLIGATOIRE :
====================
ls avec les options
-l		Liste en format long, et sur un terminal, la taille total de tous les fichiers est affiche sur une ligne avant la liste. Le formatage enplusieurs colonne n'est pas reproduire
-R		Recursif dans les dossiers rencontres
-a		Affiche les fichiers caches dont le nom commence par un '.'.
-r		Renverse l'ordre de tri en lexicographic, ou le plus vieux en premier, ou le plus lourd en premier.
-t		Tri par date de modification (le modifier le plus recemment en 1er), avant de trier par lexicographique.

Tolerence sur l'affichage (sur le padding), mais il ne doit manquer aucune information.
Pas obliger de gerer les ACL et attributs etendus (ACL = Access Control List).

/!\ Prendre en compte les implications de -R des le debut de la conception du code.

le format long :
----------------
file mode 	= entry type = b, c, d, l, s, p, -.
			= permissions XXX.XXX.XXX owner, group, other people permissions.
				r/- : read
				w/- : write
				S/s/x/- :
					S : file is not executable in the owner/group persmissions and set-user-ID/set-group-ID mode is set.
					s : file is executable in the owner/group permissions and super user/group ID is set
					x : file is executable or directory is searchable
					- : none
					for other people permission only (OTH), last charater :
						T : sticky bit is set but no execute or search permission
						t : sticky bit is set and is searchable or executable.
						T ou t place en fin de droits, comme @ ou +.
number of links
owner name
group name
number of bytes in the file
abbreviated month
day of month file was last modified
hour file was last modified
minutes file was last modified
path name

Pour chaque dossier dont le contenu est affiche :
le nombre total de 512-bytesblocks utilises par les fichiers contenus dans le dossier est affiche sur une ligne
ex :
./sudoku:
total 192

Si le fichier ou dossier a des attributs etendus, les droits sont suivis de '@'.
Si le fichier ou dossier a des information de securite etendue (comme des droits d'acces), les droits sont suivis de l'affichage d'un '+'.
Si la date de modification est anterieur a 6 mois (passe ou futur), l'annee de modification remplace les heures et les minutes.
Si le 'owner' ou 'group' ne sont pqs connus, l'ID numeric est affiche.
Si le fichier est un fichier associe a un peripherique (character ou block special), le nombre de peripheriques majeurs ou mineurs est affiche a la place de la taille.
Si le fichier est un lien symbolic, '->' precede l'affichage du chemin.

un exemple du man pour lister par taille croissante :
ls -lrS

ls returns 0 if success, <0 if an error occurs.

la gestion d'erreur est tres importante : exit programme + affichage du message d'erreur correspondant.
- les droits Permission denied.

faire un ls dans /dev --> contient les devices
ls -l dans ce fichier, majeur et mineur des devices.
b et c sont les 2 type de fichiers qui existe dans /dev surtout.

ls -r /usr --> repertoire assez violent^^ pour tester la robustesse.

PARTIE BONUS :
==============
-G, -d, -u,...
une gestion des couleurs

RAPPEL SUR LES POINTEURS SUR STRUCTURE :
========================================
t_list elem; --> reserve sur la stack de la place pour une structure elem de taille sizeof(t_list). On accede alors aux elements de elem en notant elem.content, elem.content_size car elem n'est pas un pointeur sur structure mais une structure.

t_list *elem; --> reserve de la place sur la stack pour un pointeur (8 octets)
ensuite elem = (t_list*)malloc(sizeof(t_list) reserve de la place pour une structure t_list sur la heap (beaucoup plus grande que la stack), et là, parce que elem est un pointeur, on accede aux differents elements de elem en notant (*elem).content soit elem->content (on se deplace vers la zone memoire pointee, puis on va sur content).

si on doit acceder a un caractere de la chaine *content, il est possible de noter : *elem->content (ce qui equivaut au caractere 0, soit (*elem).content[0])

COLORS
------

-- type
1. ex  directory = BLUE --> S_IFDIR
2. fx  symbolic link = MAGENTA --> S_IFLNK
3. cx  socket = GREEN --> S_IFSOCK
4. dx  pipe = YELLOW --> S_IFIFO
6. eg  block special = BLUE + BGCYAN --> S_IFBLK
7. ed  character special = BLUE + BGYELLOW --> S_IFCHR

-- perms
8. ab  executable with setuid bit set = BLACK + BGRED --> S_ISUID
9. ag  executable with setgid bit set = BLACK + BGCYAN --> S_ISGID
5. bx  executable = RED --> S_IXUSR || S_IXGRP || S_IXOTH

-- type + perms
10. ac directory writable to others, with sticky bit = BLACK + BGGREEN --> S_IFDIR && S_IWOTH && S_ISVTX
// 11. ad directory writable to others, without sticky bit = BLACK + BGYELLOW --> S_IFDIR && S_IWOTH

1. ex  directory = BLUE
2. fx  symbolic link = MAGENTA
3. cx  socket = GREEN
4. dx  pipe = YELLOW
5. bx  executable = RED

6. eg  block special = BLUE + BGCYAN
7. ed  character special = BLUE + BGYELLOW

8. ab  executable with setuid bit set = BLACK + BGRED
9. ag  executable with setgid bit set = BLACK + BGCYAN
10. ac directory writable to others, with sticky bit = BLACK + BGGREEN
11. ad directory writable to others, without sticky bit = BLACK + BGYELLOW

a     black
b     red
c     green
d     brown
e     blue
f     magenta
g     cyan
h     light grey
A     bold black, usually shows up as dark grey
B     bold red
C     bold green
D     bold brown, usually shows up as yellow
E     bold blue
F     bold magenta
G     bold cyan
H     bold light grey; looks like bright white
x     default foreground or background
